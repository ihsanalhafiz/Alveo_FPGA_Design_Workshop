-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity streamhls_process_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    input_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    input_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    input_stream_empty_n : IN STD_LOGIC;
    input_stream_read : OUT STD_LOGIC;
    output_stream_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    output_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    output_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    output_stream_full_n : IN STD_LOGIC;
    output_stream_write : OUT STD_LOGIC );
end;


architecture behav of streamhls_process_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_209_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal input_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal output_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_104 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal i_3_fu_217_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_1_fu_232_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_2_fu_242_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_3_fu_252_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_4_fu_262_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_5_fu_272_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_6_fu_282_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_7_fu_292_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_8_fu_302_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_9_fu_312_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_s_fu_322_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_10_fu_332_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_11_fu_342_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_12_fu_352_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_13_fu_362_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_14_fu_372_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_15_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_14_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_13_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_12_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_11_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_10_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_9_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_8_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_7_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_6_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_5_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_4_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_3_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_2_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_1_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_ce : STD_LOGIC;
    signal grp_fu_126_ce : STD_LOGIC;
    signal grp_fu_131_ce : STD_LOGIC;
    signal grp_fu_136_ce : STD_LOGIC;
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_146_ce : STD_LOGIC;
    signal grp_fu_151_ce : STD_LOGIC;
    signal grp_fu_156_ce : STD_LOGIC;
    signal grp_fu_161_ce : STD_LOGIC;
    signal grp_fu_166_ce : STD_LOGIC;
    signal grp_fu_171_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_181_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_191_ce : STD_LOGIC;
    signal grp_fu_196_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_188 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component streamhls_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component streamhls_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    fmul_32ns_32ns_32_4_max_dsp_1_U6 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_121_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_121_ce,
        dout => grp_fu_121_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U7 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_126_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_126_ce,
        dout => grp_fu_126_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U8 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_131_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U9 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_136_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_136_ce,
        dout => grp_fu_136_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U10 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_141_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U11 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_146_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_146_ce,
        dout => grp_fu_146_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U12 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_151_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_151_ce,
        dout => grp_fu_151_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U13 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_156_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_156_ce,
        dout => grp_fu_156_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U14 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_161_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_161_ce,
        dout => grp_fu_161_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U15 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_166_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_166_ce,
        dout => grp_fu_166_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U16 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_171_ce,
        dout => grp_fu_171_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U17 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U18 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_181_ce,
        dout => grp_fu_181_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U19 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U20 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_191_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_191_ce,
        dout => grp_fu_191_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U21 : component streamhls_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => ap_const_lv32_40000000,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);

    flow_control_loop_pipe_U : component streamhls_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_188)) then
                if ((tmp_fu_209_p3 = ap_const_lv1_0)) then 
                    i_fu_104 <= i_3_fu_217_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(input_stream_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (input_stream_empty_n = ap_const_logic_0);
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(output_stream_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (output_stream_full_n = ap_const_logic_0);
    end process;


    ap_condition_188_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_188 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, tmp_fu_209_p3, ap_start_int)
    begin
        if (((tmp_fu_209_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_104, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_104;
        end if; 
    end process;

    bitcast_ln39_10_fu_502_p1 <= grp_fu_171_p2;
    bitcast_ln39_11_fu_506_p1 <= grp_fu_176_p2;
    bitcast_ln39_12_fu_510_p1 <= grp_fu_181_p2;
    bitcast_ln39_13_fu_514_p1 <= grp_fu_186_p2;
    bitcast_ln39_14_fu_518_p1 <= grp_fu_191_p2;
    bitcast_ln39_15_fu_522_p1 <= grp_fu_196_p2;
    bitcast_ln39_1_fu_466_p1 <= grp_fu_126_p2;
    bitcast_ln39_2_fu_470_p1 <= grp_fu_131_p2;
    bitcast_ln39_3_fu_474_p1 <= grp_fu_136_p2;
    bitcast_ln39_4_fu_478_p1 <= grp_fu_141_p2;
    bitcast_ln39_5_fu_482_p1 <= grp_fu_146_p2;
    bitcast_ln39_6_fu_486_p1 <= grp_fu_151_p2;
    bitcast_ln39_7_fu_490_p1 <= grp_fu_156_p2;
    bitcast_ln39_8_fu_494_p1 <= grp_fu_161_p2;
    bitcast_ln39_9_fu_498_p1 <= grp_fu_166_p2;
    bitcast_ln39_fu_462_p1 <= grp_fu_121_p2;

    grp_fu_121_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_121_ce <= ap_const_logic_1;
        else 
            grp_fu_121_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_121_p0 <= trunc_ln31_fu_228_p1;

    grp_fu_126_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_126_ce <= ap_const_logic_1;
        else 
            grp_fu_126_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_126_p0 <= trunc_ln31_1_fu_232_p4;

    grp_fu_131_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_131_ce <= ap_const_logic_1;
        else 
            grp_fu_131_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_131_p0 <= trunc_ln31_2_fu_242_p4;

    grp_fu_136_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_136_ce <= ap_const_logic_1;
        else 
            grp_fu_136_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_136_p0 <= trunc_ln31_3_fu_252_p4;

    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_141_p0 <= trunc_ln31_4_fu_262_p4;

    grp_fu_146_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_146_ce <= ap_const_logic_1;
        else 
            grp_fu_146_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_146_p0 <= trunc_ln31_5_fu_272_p4;

    grp_fu_151_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_151_ce <= ap_const_logic_1;
        else 
            grp_fu_151_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_151_p0 <= trunc_ln31_6_fu_282_p4;

    grp_fu_156_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_156_ce <= ap_const_logic_1;
        else 
            grp_fu_156_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_156_p0 <= trunc_ln31_7_fu_292_p4;

    grp_fu_161_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_161_ce <= ap_const_logic_1;
        else 
            grp_fu_161_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_161_p0 <= trunc_ln31_8_fu_302_p4;

    grp_fu_166_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_166_ce <= ap_const_logic_1;
        else 
            grp_fu_166_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_166_p0 <= trunc_ln31_9_fu_312_p4;

    grp_fu_171_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_171_ce <= ap_const_logic_1;
        else 
            grp_fu_171_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_171_p0 <= trunc_ln31_s_fu_322_p4;

    grp_fu_176_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_176_p0 <= trunc_ln31_10_fu_332_p4;

    grp_fu_181_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_181_ce <= ap_const_logic_1;
        else 
            grp_fu_181_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_181_p0 <= trunc_ln31_11_fu_342_p4;

    grp_fu_186_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_186_ce <= ap_const_logic_1;
        else 
            grp_fu_186_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_186_p0 <= trunc_ln31_12_fu_352_p4;

    grp_fu_191_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_191_ce <= ap_const_logic_1;
        else 
            grp_fu_191_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_191_p0 <= trunc_ln31_13_fu_362_p4;

    grp_fu_196_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_196_ce <= ap_const_logic_1;
        else 
            grp_fu_196_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_196_p0 <= trunc_ln31_14_fu_372_p4;
    i_3_fu_217_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv9_10));

    input_stream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, input_stream_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_blk_n <= input_stream_empty_n;
        else 
            input_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_stream_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_stream_read <= ap_const_logic_1;
        else 
            input_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    output_stream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, output_stream_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_stream_blk_n <= output_stream_full_n;
        else 
            output_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_din <= (((((((((((((((bitcast_ln39_15_fu_522_p1 & bitcast_ln39_14_fu_518_p1) & bitcast_ln39_13_fu_514_p1) & bitcast_ln39_12_fu_510_p1) & bitcast_ln39_11_fu_506_p1) & bitcast_ln39_10_fu_502_p1) & bitcast_ln39_9_fu_498_p1) & bitcast_ln39_8_fu_494_p1) & bitcast_ln39_7_fu_490_p1) & bitcast_ln39_6_fu_486_p1) & bitcast_ln39_5_fu_482_p1) & bitcast_ln39_4_fu_478_p1) & bitcast_ln39_3_fu_474_p1) & bitcast_ln39_2_fu_470_p1) & bitcast_ln39_1_fu_466_p1) & bitcast_ln39_fu_462_p1);

    output_stream_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_stream_write <= ap_const_logic_1;
        else 
            output_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_209_p3 <= ap_sig_allocacmp_i_2(8 downto 8);
    trunc_ln31_10_fu_332_p4 <= input_stream_dout(383 downto 352);
    trunc_ln31_11_fu_342_p4 <= input_stream_dout(415 downto 384);
    trunc_ln31_12_fu_352_p4 <= input_stream_dout(447 downto 416);
    trunc_ln31_13_fu_362_p4 <= input_stream_dout(479 downto 448);
    trunc_ln31_14_fu_372_p4 <= input_stream_dout(511 downto 480);
    trunc_ln31_1_fu_232_p4 <= input_stream_dout(63 downto 32);
    trunc_ln31_2_fu_242_p4 <= input_stream_dout(95 downto 64);
    trunc_ln31_3_fu_252_p4 <= input_stream_dout(127 downto 96);
    trunc_ln31_4_fu_262_p4 <= input_stream_dout(159 downto 128);
    trunc_ln31_5_fu_272_p4 <= input_stream_dout(191 downto 160);
    trunc_ln31_6_fu_282_p4 <= input_stream_dout(223 downto 192);
    trunc_ln31_7_fu_292_p4 <= input_stream_dout(255 downto 224);
    trunc_ln31_8_fu_302_p4 <= input_stream_dout(287 downto 256);
    trunc_ln31_9_fu_312_p4 <= input_stream_dout(319 downto 288);
    trunc_ln31_fu_228_p1 <= input_stream_dout(32 - 1 downto 0);
    trunc_ln31_s_fu_322_p4 <= input_stream_dout(351 downto 320);
end behav;
