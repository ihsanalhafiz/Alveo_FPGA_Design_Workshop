// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module streamhls_process_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_stream_dout,
        input_stream_num_data_valid,
        input_stream_fifo_cap,
        input_stream_empty_n,
        input_stream_read,
        output_stream_din,
        output_stream_num_data_valid,
        output_stream_fifo_cap,
        output_stream_full_n,
        output_stream_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] input_stream_dout;
input  [2:0] input_stream_num_data_valid;
input  [2:0] input_stream_fifo_cap;
input   input_stream_empty_n;
output   input_stream_read;
output  [511:0] output_stream_din;
input  [2:0] output_stream_num_data_valid;
input  [2:0] output_stream_fifo_cap;
input   output_stream_full_n;
output   output_stream_write;

reg ap_idle;
reg input_stream_read;
reg output_stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_209_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_stream_blk_n;
wire    ap_block_pp0_stage0;
reg    output_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [8:0] i_fu_104;
wire   [8:0] i_3_fu_217_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_121_p0;
wire   [31:0] grp_fu_126_p0;
wire   [31:0] grp_fu_131_p0;
wire   [31:0] grp_fu_136_p0;
wire   [31:0] grp_fu_141_p0;
wire   [31:0] grp_fu_146_p0;
wire   [31:0] grp_fu_151_p0;
wire   [31:0] grp_fu_156_p0;
wire   [31:0] grp_fu_161_p0;
wire   [31:0] grp_fu_166_p0;
wire   [31:0] grp_fu_171_p0;
wire   [31:0] grp_fu_176_p0;
wire   [31:0] grp_fu_181_p0;
wire   [31:0] grp_fu_186_p0;
wire   [31:0] grp_fu_191_p0;
wire   [31:0] grp_fu_196_p0;
wire   [31:0] trunc_ln31_fu_228_p1;
wire   [31:0] trunc_ln31_1_fu_232_p4;
wire   [31:0] trunc_ln31_2_fu_242_p4;
wire   [31:0] trunc_ln31_3_fu_252_p4;
wire   [31:0] trunc_ln31_4_fu_262_p4;
wire   [31:0] trunc_ln31_5_fu_272_p4;
wire   [31:0] trunc_ln31_6_fu_282_p4;
wire   [31:0] trunc_ln31_7_fu_292_p4;
wire   [31:0] trunc_ln31_8_fu_302_p4;
wire   [31:0] trunc_ln31_9_fu_312_p4;
wire   [31:0] trunc_ln31_s_fu_322_p4;
wire   [31:0] trunc_ln31_10_fu_332_p4;
wire   [31:0] trunc_ln31_11_fu_342_p4;
wire   [31:0] trunc_ln31_12_fu_352_p4;
wire   [31:0] trunc_ln31_13_fu_362_p4;
wire   [31:0] trunc_ln31_14_fu_372_p4;
wire   [31:0] grp_fu_121_p2;
wire   [31:0] grp_fu_126_p2;
wire   [31:0] grp_fu_131_p2;
wire   [31:0] grp_fu_136_p2;
wire   [31:0] grp_fu_141_p2;
wire   [31:0] grp_fu_146_p2;
wire   [31:0] grp_fu_151_p2;
wire   [31:0] grp_fu_156_p2;
wire   [31:0] grp_fu_161_p2;
wire   [31:0] grp_fu_166_p2;
wire   [31:0] grp_fu_171_p2;
wire   [31:0] grp_fu_176_p2;
wire   [31:0] grp_fu_181_p2;
wire   [31:0] grp_fu_186_p2;
wire   [31:0] grp_fu_191_p2;
wire   [31:0] grp_fu_196_p2;
wire   [31:0] bitcast_ln39_15_fu_522_p1;
wire   [31:0] bitcast_ln39_14_fu_518_p1;
wire   [31:0] bitcast_ln39_13_fu_514_p1;
wire   [31:0] bitcast_ln39_12_fu_510_p1;
wire   [31:0] bitcast_ln39_11_fu_506_p1;
wire   [31:0] bitcast_ln39_10_fu_502_p1;
wire   [31:0] bitcast_ln39_9_fu_498_p1;
wire   [31:0] bitcast_ln39_8_fu_494_p1;
wire   [31:0] bitcast_ln39_7_fu_490_p1;
wire   [31:0] bitcast_ln39_6_fu_486_p1;
wire   [31:0] bitcast_ln39_5_fu_482_p1;
wire   [31:0] bitcast_ln39_4_fu_478_p1;
wire   [31:0] bitcast_ln39_3_fu_474_p1;
wire   [31:0] bitcast_ln39_2_fu_470_p1;
wire   [31:0] bitcast_ln39_1_fu_466_p1;
wire   [31:0] bitcast_ln39_fu_462_p1;
reg    grp_fu_121_ce;
reg    grp_fu_126_ce;
reg    grp_fu_131_ce;
reg    grp_fu_136_ce;
reg    grp_fu_141_ce;
reg    grp_fu_146_ce;
reg    grp_fu_151_ce;
reg    grp_fu_156_ce;
reg    grp_fu_161_ce;
reg    grp_fu_166_ce;
reg    grp_fu_171_ce;
reg    grp_fu_176_ce;
reg    grp_fu_181_ce;
reg    grp_fu_186_ce;
reg    grp_fu_191_ce;
reg    grp_fu_196_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_188;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 i_fu_104 = 9'd0;
end

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_121_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_121_ce),
    .dout(grp_fu_121_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_126_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_126_ce),
    .dout(grp_fu_126_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_131_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_131_ce),
    .dout(grp_fu_131_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_136_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_136_ce),
    .dout(grp_fu_136_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_141_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_141_ce),
    .dout(grp_fu_141_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_146_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_146_ce),
    .dout(grp_fu_146_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_151_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_156_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_166_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_166_ce),
    .dout(grp_fu_166_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_171_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_171_ce),
    .dout(grp_fu_171_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_176_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_181_ce),
    .dout(grp_fu_181_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_186_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_186_ce),
    .dout(grp_fu_186_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_191_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_191_ce),
    .dout(grp_fu_191_p2)
);

streamhls_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .din1(32'd1073741824),
    .ce(grp_fu_196_ce),
    .dout(grp_fu_196_p2)
);

streamhls_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_188)) begin
        if ((tmp_fu_209_p3 == 1'd0)) begin
            i_fu_104 <= i_3_fu_217_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((tmp_fu_209_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_121_ce = 1'b1;
    end else begin
        grp_fu_121_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_126_ce = 1'b1;
    end else begin
        grp_fu_126_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_131_ce = 1'b1;
    end else begin
        grp_fu_131_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_136_ce = 1'b1;
    end else begin
        grp_fu_136_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_141_ce = 1'b1;
    end else begin
        grp_fu_141_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_146_ce = 1'b1;
    end else begin
        grp_fu_146_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_151_ce = 1'b1;
    end else begin
        grp_fu_151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_156_ce = 1'b1;
    end else begin
        grp_fu_156_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_166_ce = 1'b1;
    end else begin
        grp_fu_166_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_171_ce = 1'b1;
    end else begin
        grp_fu_171_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_181_ce = 1'b1;
    end else begin
        grp_fu_181_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_186_ce = 1'b1;
    end else begin
        grp_fu_186_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_191_ce = 1'b1;
    end else begin
        grp_fu_191_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_196_ce = 1'b1;
    end else begin
        grp_fu_196_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_blk_n = input_stream_empty_n;
    end else begin
        input_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_read = 1'b1;
    end else begin
        input_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_stream_blk_n = output_stream_full_n;
    end else begin
        output_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_stream_write = 1'b1;
    end else begin
        output_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (input_stream_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (output_stream_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_188 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln39_10_fu_502_p1 = grp_fu_171_p2;

assign bitcast_ln39_11_fu_506_p1 = grp_fu_176_p2;

assign bitcast_ln39_12_fu_510_p1 = grp_fu_181_p2;

assign bitcast_ln39_13_fu_514_p1 = grp_fu_186_p2;

assign bitcast_ln39_14_fu_518_p1 = grp_fu_191_p2;

assign bitcast_ln39_15_fu_522_p1 = grp_fu_196_p2;

assign bitcast_ln39_1_fu_466_p1 = grp_fu_126_p2;

assign bitcast_ln39_2_fu_470_p1 = grp_fu_131_p2;

assign bitcast_ln39_3_fu_474_p1 = grp_fu_136_p2;

assign bitcast_ln39_4_fu_478_p1 = grp_fu_141_p2;

assign bitcast_ln39_5_fu_482_p1 = grp_fu_146_p2;

assign bitcast_ln39_6_fu_486_p1 = grp_fu_151_p2;

assign bitcast_ln39_7_fu_490_p1 = grp_fu_156_p2;

assign bitcast_ln39_8_fu_494_p1 = grp_fu_161_p2;

assign bitcast_ln39_9_fu_498_p1 = grp_fu_166_p2;

assign bitcast_ln39_fu_462_p1 = grp_fu_121_p2;

assign grp_fu_121_p0 = trunc_ln31_fu_228_p1;

assign grp_fu_126_p0 = trunc_ln31_1_fu_232_p4;

assign grp_fu_131_p0 = trunc_ln31_2_fu_242_p4;

assign grp_fu_136_p0 = trunc_ln31_3_fu_252_p4;

assign grp_fu_141_p0 = trunc_ln31_4_fu_262_p4;

assign grp_fu_146_p0 = trunc_ln31_5_fu_272_p4;

assign grp_fu_151_p0 = trunc_ln31_6_fu_282_p4;

assign grp_fu_156_p0 = trunc_ln31_7_fu_292_p4;

assign grp_fu_161_p0 = trunc_ln31_8_fu_302_p4;

assign grp_fu_166_p0 = trunc_ln31_9_fu_312_p4;

assign grp_fu_171_p0 = trunc_ln31_s_fu_322_p4;

assign grp_fu_176_p0 = trunc_ln31_10_fu_332_p4;

assign grp_fu_181_p0 = trunc_ln31_11_fu_342_p4;

assign grp_fu_186_p0 = trunc_ln31_12_fu_352_p4;

assign grp_fu_191_p0 = trunc_ln31_13_fu_362_p4;

assign grp_fu_196_p0 = trunc_ln31_14_fu_372_p4;

assign i_3_fu_217_p2 = (ap_sig_allocacmp_i_2 + 9'd16);

assign output_stream_din = {{{{{{{{{{{{{{{{bitcast_ln39_15_fu_522_p1}, {bitcast_ln39_14_fu_518_p1}}, {bitcast_ln39_13_fu_514_p1}}, {bitcast_ln39_12_fu_510_p1}}, {bitcast_ln39_11_fu_506_p1}}, {bitcast_ln39_10_fu_502_p1}}, {bitcast_ln39_9_fu_498_p1}}, {bitcast_ln39_8_fu_494_p1}}, {bitcast_ln39_7_fu_490_p1}}, {bitcast_ln39_6_fu_486_p1}}, {bitcast_ln39_5_fu_482_p1}}, {bitcast_ln39_4_fu_478_p1}}, {bitcast_ln39_3_fu_474_p1}}, {bitcast_ln39_2_fu_470_p1}}, {bitcast_ln39_1_fu_466_p1}}, {bitcast_ln39_fu_462_p1}};

assign tmp_fu_209_p3 = ap_sig_allocacmp_i_2[32'd8];

assign trunc_ln31_10_fu_332_p4 = {{input_stream_dout[383:352]}};

assign trunc_ln31_11_fu_342_p4 = {{input_stream_dout[415:384]}};

assign trunc_ln31_12_fu_352_p4 = {{input_stream_dout[447:416]}};

assign trunc_ln31_13_fu_362_p4 = {{input_stream_dout[479:448]}};

assign trunc_ln31_14_fu_372_p4 = {{input_stream_dout[511:480]}};

assign trunc_ln31_1_fu_232_p4 = {{input_stream_dout[63:32]}};

assign trunc_ln31_2_fu_242_p4 = {{input_stream_dout[95:64]}};

assign trunc_ln31_3_fu_252_p4 = {{input_stream_dout[127:96]}};

assign trunc_ln31_4_fu_262_p4 = {{input_stream_dout[159:128]}};

assign trunc_ln31_5_fu_272_p4 = {{input_stream_dout[191:160]}};

assign trunc_ln31_6_fu_282_p4 = {{input_stream_dout[223:192]}};

assign trunc_ln31_7_fu_292_p4 = {{input_stream_dout[255:224]}};

assign trunc_ln31_8_fu_302_p4 = {{input_stream_dout[287:256]}};

assign trunc_ln31_9_fu_312_p4 = {{input_stream_dout[319:288]}};

assign trunc_ln31_fu_228_p1 = input_stream_dout[31:0];

assign trunc_ln31_s_fu_322_p4 = {{input_stream_dout[351:320]}};

endmodule //streamhls_process_kernel
